// Generated by CoffeeScript 1.6.3
/*
Author: Andy Ching
Email: dogdoglization@gmail.com
License: MIT
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  exports.start = function(options) {
    var DatabaseFilePath, EvtMgr, Execution, db, emptyFunction, formOutput, generateCloud, initialJssoDirectory, ost, uuid, webSocketPort, webSocketServer;
    webSocketPort = options.port || 8080;
    DatabaseFilePath = options.db || null;
    initialJssoDirectory = options.importDir;
    emptyFunction = require('./empty-function.js');
    ost = require('./object-string-transfer.js');
    EvtMgr = new (require('./event-manager.js'));
    db = new (require('./db.js'))(DatabaseFilePath, initialJssoDirectory);
    uuid = (function() {
      var UUID;
      UUID = require('node-uuid');
      return function() {
        return UUID.v4();
      };
    })();
    generateCloud = function(execution) {
      var Cloud;
      return Cloud = (function() {
        Cloud.ConnectionError = (function(_super) {
          __extends(_Class, _super);

          function _Class(message) {
            this.message = message != null ? message : "problem while data transferring";
            this.name = "CloudConnectionError";
          }

          return _Class;

        })(Error);

        Cloud.ServerError = (function(_super) {
          __extends(_Class, _super);

          function _Class(message) {
            this.message = message != null ? message : "an error occur at server";
            this.name = "CloudServerError";
          }

          return _Class;

        })(Error);

        Cloud.ScriptError = (function(_super) {
          __extends(_Class, _super);

          function _Class(message) {
            this.message = message != null ? message : "an problem found inside the server script";
            this.name = "CloudScriptError";
          }

          return _Class;

        })(Error);

        Cloud.TimeoutError = (function(_super) {
          __extends(_Class, _super);

          function _Class(message) {
            this.message = message != null ? message : "function call was timeout";
            this.name = "CloudTimeoutError";
          }

          return _Class;

        })(Error);

        Cloud.ObjectNotFoundError = (function(_super) {
          __extends(_Class, _super);

          function _Class(message) {
            this.message = message != null ? message : "object is not defined";
            this.name = "CloudObjectNotFoundError";
          }

          return _Class;

        })(ReferenceError);

        Cloud.FunctionNotFoundError = (function(_super) {
          __extends(_Class, _super);

          function _Class(message) {
            this.message = message != null ? message : "function is not defined";
            this.name = "CloudFunctionNotFoundError";
          }

          return _Class;

        })(ReferenceError);

        function Cloud(jssoId, server) {
          this.jssoId = jssoId;
          this.server = server;
        }

        Cloud.prototype.invoke = function() {
          var args, err, functionName, onError, onSuccess, parameter;
          try {
            args = Array.prototype.slice.call(arguments);
            if (typeof args[0] !== 'string') {
              throw new SyntaxError("The first argument must be the function name in string");
            }
            functionName = args.shift();
            parameter = typeof args[0] !== 'function' ? (args[0] instanceof Array ? args.shift() : [args.shift()]) : [];
            if (typeof args[0] !== 'function') {
              throw new SyntaxError("The last parameter must be a callback function");
            }
            onSuccess = args.shift();
            onError = typeof args[0] === 'function' ? args[0] : emptyFunction;
            execution.addTask({
              'type': "invoke",
              'id': this.jssoId,
              'func': functionName,
              'args': parameter
            }, function(err, result) {
              if (err) {
                return onError(err);
              } else {
                return onSuccess(result);
              }
            });
          } catch (_error) {
            err = _error;
            throw err;
          }
        };

        Cloud.prototype.broadcast = function() {
          var args, functionName, onError, originParam, parameters,
            _this = this;
          args = Array.prototype.slice.call(arguments);
          if (typeof args[0] !== 'string') {
            throw new SyntaxError("The first argument must be the function name in string");
          }
          functionName = args.shift();
          parameters = typeof args[0] !== "function" ? ((originParam = args.shift()) instanceof Array ? originParam : [originParam]) : [];
          onError = typeof args[0] === "function" ? args.shift() : emptyFunction;
          execution.addTask({
            'type': "broadcast",
            'id': this.jssoId,
            'func': functionName,
            'args': parameters
          }, function(err, result) {
            var listener, _i, _len, _ref;
            if ((!err) || err instanceof Cloud.FunctionNotFoundError) {
              try {
                _ref = EvtMgr.getEventListeners(_this.jssoId, functionName);
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  listener = _ref[_i];
                  listener(result || originParam);
                }
              } finally {
                return;
              }
            } else {
              return onError(err);
            }
          });
        };

        Cloud.prototype.on = function(functionName, callback, onError) {
          if (onError == null) {
            onError = emptyFunction;
          }
          if (typeof functionName !== "string" || typeof callback !== "function" || typeof onError !== "function") {
            throw new SyntaxError("1st argument must be a function name string, 2nd must be a callback");
          }
          if (this.listenerId == null) {
            this.listenerId = uuid();
          }
          EvtMgr.listenEvent(this.jssoId, functionName, this.listenerId, callback);
        };

        Cloud.prototype.off = function(functionName) {
          if (typeof functionName !== "string") {
            throw new SyntaxError("Function name argument must be a string");
          }
          if (this.listenerId != null) {
            EvtMgr.unlistenEvent(this.jssoId, functionName, this.listenerId);
          }
        };

        return Cloud;

      })();
    };
    Execution = (function() {
      function Execution(onFinish) {
        var Cloud, counter, executeTasks, stack;
        this.onFinish = onFinish != null ? onFinish : emptyFunction;
        /*
        			# 3 private variables accessable by this object: Cloud, stack, counter
        			# 1 private function accessable by this object: executeTasks
        			# 2 object function (as public interfaces) accessing the above members: addTask, run
        			# notice that prototype functions CANNOT access these private members,
        			# members declared in between class and constructor are accessable by all class instances, also known as private static
        */

        Cloud = generateCloud(this);
        stack = [];
        counter = 0;
        executeTasks = function() {
          var callback, invokeInfo, require;
          while ((require = stack.pop()) !== void 0) {
            invokeInfo = require[0], callback = require[1];
            db.get(invokeInfo.id, function(err, jsso) {
              if (err) {
                --counter;
                callback(err, null);
              } else {
                if (typeof jsso !== "object") {
                  --counter;
                  callback(new Cloud.ObjectNotFoundError("object <" + invokeInfo.id + "> is not defined"), null);
                } else if (typeof jsso[invokeInfo.func] !== "function") {
                  --counter;
                  callback(new Cloud.FunctionNotFoundError("function <" + invokeInfo.func + "> is not defined"), null);
                } else {
                  jsso.invokeType = invokeInfo.type;
                  if (typeof invokeInfo.args === 'string') {
                    invokeInfo.args = JSON.parse(invokeInfo.args);
                  }
                  if (!invokeInfo.args instanceof Array) {
                    --counter;
                    callback(new Cloud.ConnectionError("invalided data passed to server function", null));
                  } else {
                    global.Cloud = Cloud;
                    global.error = global.response = null;
                    try {
                      if (typeof (global.response = jsso[invokeInfo.func].apply(jsso, invokeInfo.args)) === "function") {
                        global.response(function(err, result) {
                          --counter;
                          callback(global.error = err, global.response = result);
                          if (counter === 0) {
                            onFinish(global.error, global.response);
                            onFinish = emptyFunction;
                          }
                        });
                        return;
                      } else {
                        --counter;
                        global.response = callback(null, global.response) || global.response;
                      }
                    } catch (_error) {
                      err = _error;
                      --counter;
                      global.error = callback(global.error = err, null) || global.error;
                    }
                  }
                }
              }
              if (counter === 0) {
                onFinish(global.error, global.response);
                return onFinish = emptyFunction;
              } else if (stack.length !== 0) {
                return executeTasks();
              }
            });
          }
        };
        this.run = executeTasks;
        this.addTask = function(invokeInfo, callback) {
          if (callback == null) {
            callback = emptyFunction;
          }
          stack.push([invokeInfo, callback]);
          counter++;
          return this;
        };
      }

      return Execution;

    })();
    formOutput = function(response, isError, additionalInfo) {
      var responseMessage, responseType, responsesType;
      if (response instanceof Error) {
        responseType = response.name;
        responseMessage = response.message;
      } else {
        responseMessage = (function() {
          switch ((responseType = typeof response)) {
            case "undefined":
              return null;
            case "string":
            case "number":
            case "boolean":
              return response;
            case "function":
              return response.toString();
            case "object":
              if (response === null) {
                return response;
              } else {
                if (response instanceof Array) {
                  responseType = "Array";
                }
                return ost.toString(response);
              }
              break;
            default:
              responsesType = "ScriptError";
              return "Unsupported return type in server script";
          }
        })();
      }
      additionalInfo.err = isError;
      additionalInfo.type = responseType;
      additionalInfo.data = responseMessage;
      return additionalInfo;
    };
    webSocketServer = new (require('ws').Server)({
      port: webSocketPort
    });
    return webSocketServer.on('connection', function(clientws) {
      clientws.on('message', function(msg) {
        var err, invokeInfo;
        try {
          invokeInfo = JSON.parse(msg);
          if (!(typeof (invokeInfo != null ? invokeInfo.id : void 0) === "string" && typeof invokeInfo.type === "string" && invokeInfo.type.match(/(invoke|broadcast|listen|unlisten)/) && typeof invokeInfo.func === "string" && (invokeInfo.args ? typeof invokeInfo.args === "string" : true))) {
            clientws.send(JSON.stringify(formOutput(new Cloud.ConnectionError("invalided data received by server", true, {
              'ref': invokeinfo.ref,
              'evt': "data-error"
            }))));
          }
          switch (invokeInfo.type) {
            case "invoke":
              return (new Execution(function(err, result) {
                return clientws.send(JSON.stringify(formOutput(err || result, (err ? true : false), {
                  'ref': invokeInfo.ref,
                  'evt': "invoke"
                })));
              })).addTask(invokeInfo).run();
            case "broadcast":
              return (new Execution(function(err, result) {
                var listener, _fn, _i, _len, _ref;
                if ((!err) || err.name === "CloudFunctionNotFoundError") {
                  try {
                    msg = result || (invokeInfo.args.length === 1 ? invokeInfo.args[0] : invokeInfo.args);
                    _ref = EvtMgr.getEventListeners(invokeInfo.id, invokeInfo.func);
                    _fn = function(listener) {
                      return setTimeout((function() {
                        return listener(msg);
                      }), 0);
                    };
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                      listener = _ref[_i];
                      _fn(listener);
                    }
                  } finally {

                  }
                  return clientws.send(JSON.stringify(formOutput("ok", false, {
                    'ref': invokeInfo.ref,
                    'evt': "broadcast"
                  })));
                } else {
                  return clientws.send(JSON.stringify(formOutput(err, true, {
                    'ref': invokeInfo.ref,
                    'evt': "broadcast"
                  })));
                }
              })).addTask(invokeInfo).run();
            case "listen":
              if (clientws.listenerId == null) {
                clientws.listenerId = uuid();
              }
              EvtMgr.listenEvent(invokeInfo.id, invokeInfo.func, clientws.listenerId, function(message) {
                return clientws.send(JSON.stringify(formOutput(message, false, {
                  'ref': invokeInfo.ref,
                  'evt': "message"
                })));
              });
              return clientws.send(JSON.stringify(formOutput("ok", false, {
                'ref': invokeInfo.ref,
                'evt': "listen"
              })));
            case "unlisten":
              if ((clientws.listenerId != null) && EvtMgr.unlistenEvent(invokeInfo.id, invokeInfo.func, clientws.listenerId)) {
                return clientws.send(JSON.stringify(formOutput("ok", false, {
                  'ref': invokeInfo.ref,
                  'evt': "unlisten"
                })));
              } else {
                return clientws.send(JSON.stringify(formOutput("no events in listening", false, {
                  'ref': invokeInfo.ref,
                  'evt': "unlisten"
                })));
              }
              break;
            default:
              return clientws.send(JSON.stringify(formOutput(new Cloud.ConnectionError("invalided data received by server", true, {
                'ref': invokeinfo.ref,
                'evt': "data-error"
              }))));
          }
        } catch (_error) {
          err = _error;
          console.log("runtime error: " + err.stack);
          return clientws.send(JSON.stringify(formOutput(err, true, {
            'ref': invokeInfo.ref,
            'evt': "error"
          })));
        }
      });
      return clientws.on('close', function() {
        return EvtMgr.removeListener(clientws.listenerId);
      });
    });
  };

}).call(this);
