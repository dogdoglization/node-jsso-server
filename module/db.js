// Generated by CoffeeScript 1.6.3
/*
Author: Andy Ching
Email: dogdoglization@gmail.com
License: MIT
*/


(function() {
  var DB, cloneObject, emptyFunction, ost;

  emptyFunction = require('./empty-function.js');

  ost = require('./object-string-transfer.js');

  cloneObject = function(obj) {
    var k, newObj, v;
    if (obj === null || typeof obj !== "object") {
      return obj;
    }
    newObj = obj.constructor();
    for (k in obj) {
      v = obj[k];
      newObj[k] = cloneObject(v);
    }
    return newObj;
  };

  /*
  # the db object to export.
  # get: function(id: string, callback: function(error, object)), 
  #       pass object to callback acorrding to id
  # set: function(id: string, objectOrString: object|string, callback: function(error, object)),
  #       save object to db and indexed by id. convert to object if it is a string. pass the object to callback
  */


  DB = (function() {
    function DB(dbFilePath, initialJssoDir) {
      var cache, db_jsso, fs, get, nedb, removeFromDB, set;
      nedb = new (require('nedb'))({
        filename: dbFilePath,
        autoload: true
      });
      nedb.ensureIndex({
        fieldName: "id"
      });
      cache = {};
      get = function(id, callback) {
        var obj;
        if (typeof id !== "string" || typeof callback !== "function") {
          callback(new Error("Wrong usage of db.get function", null));
        }
        if ((obj = cache[id]) != null) {
          callback(null, cloneObject(obj));
        } else {
          nedb.findOne({
            'id': id
          }, function(err, data) {
            obj = (data != null ? data.src : void 0) != null ? ost.toObject(data.src) : null;
            if (obj != null) {
              cache[data.id] = obj;
            }
            return callback(err, obj);
          });
        }
      };
      set = function(id, objectOrString, callback) {
        var err, object, objectString;
        if (typeof id !== "string" || ((objectOrString != null) && typeof objectOrString !== "object" && typeof objectOrString !== "string") || typeof callback !== "function") {
          callback(new Error("Wrong usage of db.set function", null));
        }
        try {
          if (typeof objectOrString === "object") {
            object = objectOrString;
            objectString = ost.toString(objectOrString);
          } else {
            object = ost.toObject(objectOrString);
            objectString = objectOrString;
          }
          nedb.update({
            "id": id
          }, {
            "id": id,
            "src": objectString
          }, {
            upsert: true
          }, function(err, numReplaced, upsert) {
            if (err) {
              return callback(err, null);
            } else if (numReplaced > 1) {
              cache[id] = object;
              return callback(new Error("multi-replacement", object));
            } else {
              cache[id] = object;
              return callback(null, object);
            }
          });
        } catch (_error) {
          err = _error;
          callback(err, null);
        }
      };
      removeFromDB = function(id, callback) {
        if (typeof id !== "string" || typeof callback !== "function") {
          callback(new Error("Wrong usage of db.delete function", null));
        }
        return nedb.remove({
          'id': id
        }, {
          multi: true
        }, function(err, numRemoved) {
          if (err) {
            return callback(err, "fail");
          } else {
            delete cache[id];
            return callback(null, "success");
          }
        });
      };
      db_jsso = {
        getIdList: function() {
          var id, obj, _results;
          _results = [];
          for (id in cache) {
            obj = cache[id];
            _results.push(id);
          }
          return _results;
        },
        getText: function(id) {
          return function(callback) {
            return nedb.findOne({
              'id': id
            }, function(err, data) {
              var str;
              if (err) {
                return callback(err, null);
              } else if ((data != null ? data.src : void 0) == null) {
                if (cache[id] != null) {
                  try {
                    str = ost.toString(cache[id]);
                  } catch (_error) {
                    err = _error;
                    callback(new Error("Fail to stringify object"), null);
                    return;
                  }
                  return callback(null, str);
                } else {
                  return callback(new Error("Fail to get the content", null));
                }
              } else {
                return callback(null, data.src);
              }
            });
          };
        },
        save: function(id, text) {
          return function(callback) {
            return set(id, text, function(err, obj) {
              return callback(err, obj != null ? "success" : "fail");
            });
          };
        },
        remove: function(id) {
          return function(callback) {
            return removeFromDB(id, callback);
          };
        }
      };
      this.get = get;
      this.set = set;
      this.remove = removeFromDB;
      cache["admin.db"] = db_jsso;
      if (initialJssoDir != null) {
        if (!initialJssoDir.match(/\/$/)) {
          initialJssoDir = initialJssoDir + "/";
        }
        fs = require("fs");
        fs.readdir(initialJssoDir, function(err, files) {
          var fileName, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            fileName = files[_i];
            _results.push((function(fileName) {
              return fs.readFile(initialJssoDir + fileName, {
                encoding: "UTF-8"
              }, function(err, data) {
                var id, jsso;
                if (err) {
                  return console.log("fail to load " + fileName + " from directory.");
                } else {
                  try {
                    jsso = ost.toObject(data);
                    id = typeof jsso.id === "string" ? jsso.id : fileName;
                    return get(id, function(err, obj) {
                      if (obj == null) {
                        cache[id] = jsso;
                        return console.log("file \"" + fileName + "\" is loaded as <" + id + ">.");
                      } else {
                        return console.log("a newer version of object <" + id + "> defined in file \"" + fileName + "\" is found in db.");
                      }
                    });
                  } catch (_error) {
                    err = _error;
                    return console.log("fail to load " + fileName + " from directory: " + err.message);
                  }
                }
              });
            })(fileName));
          }
          return _results;
        });
      }
    }

    return DB;

  })();

  module.exports = DB;

}).call(this);
